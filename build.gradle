plugins {
    id 'cpp'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
    id 'edu.wpi.first.NativeUtils' version '2024.7.2'
    id 'edu.wpi.first.GradleJni' version '1.1.0'
    id 'edu.wpi.first.GradleVsCode' version '2.1.0'
    id 'com.diffplug.spotless' version '6.11.0'
}

repositories {
    mavenCentral()
}


// Add tasks to download and extract the tar.bz2 file
def webotsHome = "webots-libcontroller-R2023b/"

wpilibRepositories.addAllReleaseRepositories(project)
wpilibRepositories.addAllDevelopmentRepositories(project)

apply from: 'config.gradle'

// Set up exports properly
nativeUtils {
    exportsConfigs {
        // Main library is just default empty. This will export everything
        OvertureLib {
        }
    }
}

model {
    components {
        WebotsLibrary(NativeLibrarySpec) {
            binaries.all {
                def targetPlatform = targetPlatform.name.toLowerCase()

                if(targetPlatform.contains('windows')){
                    cppCompiler.args "/wd4090", "/wd4723"
                    linker.args "/LIBPATH:${webotsHome}/lib/msys", 'controller.lib', 'car.lib', 'driver.lib'
                } else if (targetPlatform.contains('osx')) {
                    cppCompiler.args "-Wno-error=ignored-qualifiers", "-Wno-error=array-parameter"
                    linker.args "-L${webotsHome}/lib/darwin20", '-lController', '-lCppController', '-lCppCar', '-lCppDriver'
                }else {
                    cppCompiler.args "-Wno-error=ignored-qualifiers", "-Wno-error=array-parameter"
                    linker.args "-L${webotsHome}/lib/linux-gnu", '-lController', '-lCppController', '-lCppCar', '-lCppDriver'
                }
            }

            sources {
                cpp {
                    source {
                        srcDirs  "${webotsHome}/source/cpp"
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs "${webotsHome}/include/c"
                        srcDirs "${webotsHome}/include/cpp"
                    }
                }
            }
        }

        nt_robot_controller(NativeExecutableSpec) {
            binaries.all {
                cppCompiler.define('_USE_MATH_DEFINES')
                lib library: 'WebotsLibrary', linkage: 'static'

                def targetPlatform = targetPlatform.name.toLowerCase()

                if(targetPlatform.contains('windows')){
                    cppCompiler.args "/wd4090", "/wd4723"
                    linker.args "/LIBPATH:${webotsHome}/lib/msys", 'controller.lib', 'car.lib', 'driver.lib'
                } else if (targetPlatform.contains('osx')) {
                    cppCompiler.args "-Wno-error=ignored-qualifiers", "-Wno-error=array-parameter"
                    linker.args "-L${webotsHome}/lib/darwin20", '-lController', '-lCppController', '-lCppCar', '-lCppDriver'
                }else {
                    cppCompiler.args "-Wno-error=ignored-qualifiers", "-Wno-error=array-parameter"
                    linker.args "-L${webotsHome}/lib/linux-gnu", '-lController', '-lCppController', '-lCppCar', '-lCppDriver'
                }
            }

            sources.cpp {
                source {
                    srcDir 'src/nt_robot_controller'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/nt_robot_controller'
                }
            }

            nativeUtils.useRequiredLibrary(it, 'wpilib_static')
        }
    }
}

spotless {
    cpp {
        target fileTree('.') {
            include '**/*.cpp', '**/*.h'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseCdt()
        toggleOffOn()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}
